# -*- coding: utf-8 -*-
"""jobrecommender.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13uX-AFc9A6p7C23fZq4JSDuoCFE6wLP-

### Data Understanding
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns

df = pd.read_csv('job_recommendation_dataset.csv')

df.head()

print(f'Jumlah baris: {df.shape[0]}')
print(f'Jumlah kolom: {df.shape[1]}')

"""Berdasarkan data tersebut variabel-variabel pada Job Recommendation Dataset adalah sebagai berikut:


| Column Name        | Description |
|--------------------|------------|
| **job_title**      | Judul spesifik dari posisi pekerjaan (misalnya, Software Engineer, Marketing Manager). Terdapat 639 nilai unik. |
| **company**       | Nama perusahaan yang menawarkan posisi pekerjaan (misalnya, Google, Amazon, Microsoft). Terdapat 37.022 nilai unik. |
| **location**      | Kota atau wilayah tempat pekerjaan tersebut berbasis. Terdapat 7 nilai unik. Lokasi paling umum: Toronto (14%), London (14%). |
| **experience_level** | Tingkat senioritas yang dibutuhkan (Entry-Level: 34%, Mid-Level: 33%, Senior-Level: 33%). Terdapat 3 nilai unik. |
| **salary_range**  | Rentang gaji mulai dari $40.000 hingga $150.000. Rata-rata: $95,1K, Deviasi Standar: $31,8K. |
| **industry**      | Sektor industri tempat pekerjaan berada (misalnya, Software, Manufacturing). Terdapat 7 nilai unik. Industri paling umum: Software (15%). |
| **required_skills** | Daftar keterampilan yang diperlukan untuk pekerjaan tersebut (misalnya, Python, SQL, Sales & Merchandising). Terdapat 1.559 nilai unik. Keterampilan paling umum: Python (1%). |


"""

df.info()

df.describe(include='all')

print(df['Industry'].value_counts())

"""## Exploratory Data Analysis"""

industry_software = df.loc[df['Industry'] == 'Software'].count()[1]
industry_manufacturing = df.loc[df['Industry'] == 'Manufacturing'].count()[1]
industry_marketing = df.loc[df['Industry'] == 'Marketing'].count()[1]
industry_education = df.loc[df['Industry'] == 'Education'].count()[1]
industry_retail = df.loc[df['Industry'] == 'Retail'].count()[1]
industry_healthcare = df.loc[df['Industry'] == 'Healthcare'].count()[1]
industry_finance = df.loc[df['Industry'] == 'Finance'].count()[1]

labels = [
    'Software',
    'Manufacturing',
    'Marketing',
    'Education',
    'Retail',
    'Healthcare',
    'Finance'
]
values = [
    industry_software,
    industry_manufacturing,
    industry_marketing,
    industry_education,
    industry_retail,
    industry_healthcare,
    industry_finance
]

plt.figure(figsize=(12, 6))
plt.title('Jumlah Pekerjaan Berdasarkan Industri')
def func(pct, all_values):
    absolute = int(round(pct/100. * sum(all_values)))
    return f"{pct:.1f}%\n({absolute:,})"

plt.pie(values, labels=labels, autopct=lambda pct: func(pct, values))
plt.show()

"""Jumlah pekerjaan yang tersedia cukup merata, pekerjaan di industri Sofware merupakan industri yang paling banyak membuka lowongan pekerjaan sebanyak 7302."""

industry_salary_avg = df.groupby('Industry')['Salary'].mean().reset_index()

print(industry_salary_avg)

plt.figure(figsize=(12, 6))
sns.barplot(x='Industry', y='Salary', data=industry_salary_avg, palette='viridis')

plt.title('Rata-rata Salary Berdasarkan Industri', fontsize=14)
plt.xlabel('Industri', fontsize=12)
plt.ylabel('Rata-rata Salary ($)', fontsize=12)
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)

plt.show()

"""Berdasarkan barplot diatas, rata-rata gaji setiap industri hampir sama yaitu kurang lebih 95k USD. Perusahaan yang memberikan gaji tertinggi adalah perusahaan di industri Sofware dengan rata-rata 95606.272254 USD.

## Data Preparation

Data preparation bertujuan untuk mempersiapkan data agar proses pengembangan model diharapkan akurasi model akan menjadi lebih baik dan mengurangi bias pada data. Tahapan preparation data yaitu

- Seleksi Fitur
- Cleaning Data
- Mengubah Nama Kolom dengan Menghapus Spasi
- Mengurangi Dataset
- Ekstraksi Fitur dengan TF-IDF
"""

df.head(3)

"""Dataset ini memiliki banyak fitur yang dapat digunakan tetapi dalam proyek sistem rekomendasi sederhana ini hanya menggunakan dua kolom yaitu Job Title dan Required Skills. Fitur yang lainnya mungkin dapat menjadi nilai tambah untuk membuat model yang lebih kompleks."""

selected_features = ['Job Title', 'Required Skills']
df = df[selected_features]

df.isna().sum()

"""Data ini sudah bersih jadi tidak perlu cleaning data

Hapus spasi pada kolom Required Skills dan JobTitle
"""

df = df.rename(columns={'Required Skills': 'RequiredSkills', 'Job Title': 'JobTitle'})

"""Proyek ini hanya membutuhkan 5000 baris data karena keterbatasan resource."""

df = df.iloc[:5000]

"""## Model Development"""

from sklearn.feature_extraction.text import TfidfVectorizer

tfidf = TfidfVectorizer(stop_words='english')
tfidf.fit(df['RequiredSkills'])
tfidf.get_feature_names_out()

tfidf_matrix = tfidf.transform(df['RequiredSkills'])
tfidf_matrix.shape

pd.DataFrame(
    tfidf_matrix.todense(),
    columns=tfidf.get_feature_names_out(),
    index=df.RequiredSkills
).sample(10, axis=1).sample(10, axis=0)

from sklearn.metrics.pairwise import cosine_similarity

similarity = cosine_similarity(tfidf_matrix)
similarity

similarity_df = pd.DataFrame(
    similarity, index=df['JobTitle'], columns=df['JobTitle']
)
similarity_df.sample(10, axis=1).sample(10, axis=0)

"""## Evaluation"""

def job_recommendations(job_title, similarity_data=similarity_df, items=df[['JobTitle','RequiredSkills']], n=5):

  if not isinstance(similarity_data, pd.DataFrame):
    raise TypeError("similarity_data harus berupa DataFrame pandas.")
  if job_title not in similarity_data.columns:
    raise ValueError(f"Job '{job_title}' tidak ditemukan di data kemiripan.")

  index = similarity_data.loc[:, job_title].to_numpy().argpartition(range(-1, -n-1, -1)).flatten()
  closest = similarity_data.columns[index[-1:-(n+2):-1]]
  closest = closest.drop(job_title, errors='ignore')
  recommendations = pd.DataFrame(closest, columns=['JobTitle']).merge(items, on='JobTitle', how='left')

  return recommendations.head(n)

df[df.JobTitle.eq('Software engineer')]

job_recommendations('Software engineer')

"""Sistem telah berhasil merekomendasikan top 5 job yang mirip dengan Software Engineer, yaitu job yang memiliki required skill yang sama.

Evaluasi model Content-Based Filtering dilakukan dengan menggunakan metrik Precision. Metrik ini mengukur sejauh mana model dapat memprediksi kejadian yang relevan atau positif.

Rumus Precision:

![precision_formula](https://github.com/user-attachments/assets/0943cb5f-fcf1-450c-aa48-e694e4b2ecda)

Pada contoh rekomendasi di atas: Precision = 5/5. Jadi precision = 100%.
"""